{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Un benvenuto a Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/thorodim/PythonP./blob/main/Un_benvenuto_a_Colaboratory.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RHhe7H6tJTW9",
        "outputId": "5aa22dd8-a2c4-4d35-b330-d954b3691180"
      },
      "source": [
        "x = True\r\n",
        "print(x) "
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xITAxwOqCnle",
        "outputId": "4078a346-7048-438f-f2e1-976ebfada386"
      },
      "source": [
        "for _ in {True, False}: #per ogni valore true,false nell'insieme, fai stampa\r\n",
        "  print(f'il valore è {_} wow!')  #stampa interno insieme"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "il valore è False wow!\n",
            "il valore è True wow!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZafBqLCWJL4d",
        "outputId": "df36a2d8-e98b-4f36-b79a-eb8b05d5d9d9"
      },
      "source": [
        "for element in range(5):\r\n",
        "  print(element)"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L94oBqg1STeo",
        "outputId": "238765e4-3c3c-4521-e7c9-d2dc8f54c5d0"
      },
      "source": [
        "x = 3\r\n",
        "y = 4\r\n",
        "print(x)\r\n",
        "print(y)\r\n",
        "print(x+y)\r\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3\n",
            "4\n",
            "7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5pCu9XiuVh3A",
        "outputId": "b16ec270-5456-4093-cb36-3eb7d2f82527"
      },
      "source": [
        "x = True\r\n",
        "y = False\r\n",
        "print(x and y)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZmBwPATTV8Rw",
        "outputId": "8b54b56e-3436-4774-a9ad-c30ba07cc8fa"
      },
      "source": [
        "valori_possibili = (0, 1)\r\n",
        "\r\n",
        "for A in valori_possibili: \r\n",
        "  for B in valori_possibili:\r\n",
        "    print(f'{A}  {B} | {A and B}') #tabella di verità dell'AND\r\n",
        "\r\n"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0  0 | 0\n",
            "0  1 | 0\n",
            "1  0 | 0\n",
            "1  1 | 1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        },
        "id": "uHx4IbumXzPZ",
        "outputId": "8c181372-8aab-4c80-acbc-4cf01d812201"
      },
      "source": [
        "valori_possibili = ('F','V') # AND con F e V\r\n",
        "\r\n",
        "for A in valori_possibili: \r\n",
        "  for B in valori_possibili:\r\n",
        "    if (A == 'V' and B == 'V'):\r\n",
        "      print(f'{A} | {B} | {A}')\r\n",
        "      else: \r\n",
        "    print(f'{A}  {B} | F') "
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-17-6f6b3f260222>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    else:\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}
